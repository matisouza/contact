version: '3'
services:

 #***************** INICIO PostgreSql *****************
#  db:
#     image: postgres:14.3
#     restart: always
#     ports:
#       - "5432:5432"
#     environment:
#       POSTGRES_USER: ${TYPEORM_COMMERCE_USERNAME_TRANSACTIONAL}
#       POSTGRES_PASSWORD: ${TYPEORM_COMMERCE_PASSWORD_TRANSACTIONAL}
#       POSTGRES_DB: ${TYPEORM_COMMERCE_DATABASE}
#     container_name: commerce-ms
#   pgadmin:
#     image: dpage/pgadmin4
#     container_name: pgadmin4_container
#     restart: always
#     ports:
#       - "5050:80"
#     env_file:
#       - ./docker-secrets/pgadmin.env
#     volumes:
#       - ./pgadmin:/var/lib/pgadmin
#     depends_on:
#       - postgres
#  #***************** FIN PostgreSql *****************

#***************** INICIO Kafka *****************
  zookeeper:
    image: zookeeper:3.4.12
    restart: always
    hostname: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./kafka/data/zookeeper/data:/data
      - ./kafka/data/zookeeper/datalog:/datalog

  kafka:
    image: confluentinc/cp-kafka:5.3.0
    restart: always
    hostname: kafka
    ports:
      - '9092:9092'
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19091,LISTENER_DOCKER_EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: ERROR
      KAFKA_TOOLS_LOG4J_LOGLEVEL: ERROR
      KAFKA_LOG4J_LOGGERS: "org.apache.zookeeper=ERROR,org.apache.kafka=ERROR,kafka=ERROR,kafka.cluster=ERROR,kafka.controller=ERROR,kafka.coordinator=ERROR,kafka.log=ERROR,kafka.server=ERROR,kafka.zookeeper=ERROR,state.change.logger=ERROR,kafka.log.LogCleaner=ERROR"
    volumes:
      - ./kafka/data/kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper

#   kafdrop:
#     image: obsidiandynamics/kafdrop
#     restart: always
#     ports:
#       - '9099:9000'
#     environment:
#       KAFKA_BROKERCONNECT: 'kafka:19091'
#     depends_on:
#       - kafka

#   kafka-ui:
#     image: provectuslabs/kafka-ui
#     container_name: kafka-ui
#     ports:
#       - "8080:8080"
#     restart: always
#     environment:
#       - KAFKA_CLUSTERS_0_NAME=local
#       - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:19091
# #***************** FIN Kafka *****************

# #***************** INICIO DynamoDb *****************
#   dynamo-db-local:
#     image: "amazon/dynamodb-local:latest"
#     container_name: dynamo-db-local
#     ports:
#       - "8000:8000"
#     command: " -jar DynamoDBLocal.jar -sharedDb -dbPath ."
# #***************** FIN DynamoDb *****************

# #***************** INICIO Redis *****************
#   redis:
#     container_name: redis
#     image: 'redis:alpine'
#     ports:
#       - '6379:6379'

#   redis-commander:
#     container_name: redis-commander
#     hostname: redis-commander
#     image: spryker/redis-commander:0.8.0
#     restart: always
#     environment:
#       - REDIS_HOSTS=local:redis:6379
#     ports:
#       - "8082:8081"
#     depends_on:
#       - redis
# #***************** FIN Redis *****************


# #***************** INICIO Localstack *****************
#   localstack:
#     image: localstack/localstack:latest
#     environment:
#       - AWS_DEFAULT_REGION=us-east-1
#       - EDGE_PORT=4566
#       - SERVICES=sqs,sns,secretsmanager
#     ports:
#       - '4566:4566'
# #***************** FIN Localstack *****************
# networks:
#   services_aval_soluciones_digitales:
#     external: false
